import{_ as o,N as n,n as r,e as i,o as l,c as p,a as e,h as c,q as b}from"./index-giYzRquH.js";import{M as v}from"./Menu-6i8HfK8r.js";import{_ as u,a as g,b as m,c as f,d as h,e as y}from"./Oper bits-j1j_Re2o.js";const x=""+new URL("../imagenes/Sintaxis Switch.png",import.meta.url).href,_={components:{NavBar:n,Menu:v},methods:{finish(){r.push("/descomposicion")}}},w={id:"user"},z={class:"card card-body mt-8, align-left, col-md-15"},q=b('<h1 class="text-center" data-v-6ebe35d8>5.2 Switch case</h1><br data-v-6ebe35d8><br data-v-6ebe35d8><h2 data-v-6ebe35d8>5.2.1 Concepto de switch case</h2><p class="texto-personalizado" data-v-6ebe35d8>La instrucción Switch case es una estructura de control condicional, la cual permite ejecutar multiples bloques de instrucciones o casos que puede llegar a cumplir una variable, y de este modo, qué acción tomar en cada situación, incluso es posible determinar qué acción llevar a cabo en caso de que no se cumpla ninguna de las condiciones dadas.</p><p data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>Nota:</span> Esta estructura se suele usar para la creación de menús debido a la facilidad con la que maneja las diferentes situaciones.</p><br data-v-6ebe35d8><h2 data-v-6ebe35d8>5.2.2 Sintaxis switch case</h2><p class="texto-personalizado" data-v-6ebe35d8>La estructura de Switch case está dividida en las siguientes partes:</p><ul data-v-6ebe35d8><li data-v-6ebe35d8><p class="texto-personalizado" data-v-6ebe35d8><strong data-v-6ebe35d8>Variable de entrada:</strong> Se utilizará como interruptor de la sentencia y esta debe de ser de tipo entero <span style="font-weight:bold;" data-v-6ebe35d8>(int)</span>.</p></li><p data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>Nota:</span> La variable de entrada también puede ser de tipo <strong data-v-6ebe35d8>(char)</strong>, pero lo más es común es usar la variable de tipo entera.</p><li data-v-6ebe35d8><p class="texto-personalizado" data-v-6ebe35d8><strong data-v-6ebe35d8>Expresión Switch:</strong> Es la expresión que se encarga de recibir la variable que se va a comparar en cada situación <span style="font-weight:bold;" data-v-6ebe35d8>(casos)</span>.</p></li><p data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>Nota:</span> La expresión Switch no permite que dos casos <strong data-v-6ebe35d8>(case)</strong> tengan el mismo valor.</p><li data-v-6ebe35d8><p class="texto-personalizado" data-v-6ebe35d8><strong data-v-6ebe35d8>Case:</strong> También llamado constante o bloque de instrucción, es el que se encarga de cumplir la validación <span style="font-weight:bold;" data-v-6ebe35d8>(variable de entrada)</span> si esta coincide con el valor asignado a algún <strong data-v-6ebe35d8>(case)</strong>.</p></li><li data-v-6ebe35d8><p class="texto-personalizado" data-v-6ebe35d8><strong data-v-6ebe35d8>Break:</strong> Es la declaración encargada de detener, salir o terminar la ejecución de algún bloque de instrucción <strong data-v-6ebe35d8>(case)</strong>.</p></li><p data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>Nota:</span> La declaración break siempre debe de estar escrita al final de un bloque de instrucción <strong data-v-6ebe35d8>(case)</strong>, en caso de ser una declaración <strong data-v-6ebe35d8>(default)</strong> es opcional usarlo.</p><li data-v-6ebe35d8><p class="texto-personalizado" data-v-6ebe35d8><strong data-v-6ebe35d8>Default:</strong> Esta declaración es opcional y especifica algún caso o instrucción <strong data-v-6ebe35d8>(case)</strong>, que se ejecutará si no hay coincidencia entre la <strong data-v-6ebe35d8>(variable de entrada)</strong> y el valor de los casos.</p></li><p data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>Nota:</span> La declaración default se suele usar para imprimir un mensaje de error al usuario.</p></ul><br data-v-6ebe35d8><img class="centrada" src="'+x+'" alt="" data-v-6ebe35d8><br data-v-6ebe35d8><h2 data-v-6ebe35d8>5.2.3 Declaración switch case</h2><p class="texto-personalizado" data-v-6ebe35d8>Para declarar una variable se debe de tener en cuenta su estructura básica:</p><p class="text-center" data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>Tipo_de_variable / Nombre_de_la_variable = Valor_de_la_variable</span></p><p class="texto-personalizado" data-v-6ebe35d8>El nombre de la variable puede ser cualquiera y puede estar conformado por números y letras al mismo tiempo, pero no puede tener ninguna de las siguientes restricciones:</p><ul data-v-6ebe35d8><li class="texto-personalizado" data-v-6ebe35d8>Empezar por un número.</li><li class="texto-personalizado" data-v-6ebe35d8>Tener espacios.</li><li class="texto-personalizado" data-v-6ebe35d8>Utilizar palabras reservadas.</li><li class="texto-personalizado" data-v-6ebe35d8>Tener carácteres especiales como tildes, comas, etc.</li></ul><img class="centrada" src="'+u+'" alt="" data-v-6ebe35d8><br data-v-6ebe35d8><p data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>Nota:</span> El valor de la variable debe de ir asociado al tipo de variable que se declare.</p><h2 data-v-6ebe35d8>4.2 Concepto de operación</h2><p class="texto-personalizado" data-v-6ebe35d8>Un operador es un elemento que permite realizar acciones entre operandos <strong data-v-6ebe35d8>(variables)</strong>.</p><p data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>Nota:</span> El operador más importante que se usa es el de asignación, el cual se representa por el símbolo<strong data-v-6ebe35d8>(=)</strong>.</p><h2 data-v-6ebe35d8>4.2.1 Tipos de operadores</h2><p class="texto-personalizado" data-v-6ebe35d8>Los tipos de operadores son seis según su función, los cuales son aritméticos, relacionales, de asignación, lógicos, de manejo de dirección y de Bits.</p><p class="texto-personalizado" style="padding-left:20px;" data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>4.2.1.1. Operadores aritméticos:</span> Son aquellos que se usan para realizar cálculos y operaciones con números reales. Entre los más comunes se pueden encontrar:</p><img class="centrada" src="'+g+'" alt="" data-v-6ebe35d8><br data-v-6ebe35d8><p data-v-6ebe35d8><span style="font-weight:bold;padding-left:20px;" data-v-6ebe35d8>Nota:</span> Los operadores de incremento y decremento son más comunes en el uso de estructuras de repetición <strong data-v-6ebe35d8>(ciclos)</strong>.</p><p class="texto-personalizado" style="padding-left:20px;" data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>4.2.1.2. Operadores relacionales:</span> También llamados operadores lógicos y de comparación, son utilizados para validar la veracidad o falsedad de las propuestas de relación. Las expresiones relacionales <strong data-v-6ebe35d8>(operadores relacionales)</strong> aceptan diversos tipos de argumentos y su respuesta siempre es verdadero <strong data-v-6ebe35d8>(true)</strong> o falso <strong data-v-6ebe35d8>(false)</strong>, es decir, un resultado booleano.</p><img class="centrada" src="'+m+'" alt="" data-v-6ebe35d8><br data-v-6ebe35d8><p class="texto-personalizado" style="padding-left:20px;" data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>4.2.1.3. Operadores de asignación:</span> Como su nombre lo dice estos operadores se usan para asignar un valor determinado a una variable. Los más comunes son:</p><p style="padding-left:20px;" data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>Nota:</span> Los operadores de asignación no deben tener espacios entre el medio y los últimos cuatro de la lista solo permiten el uso de variables del tipo entero <strong data-v-6ebe35d8>(int)</strong>.</p><p class="texto-personalizado" style="padding-left:20px;" data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>4.2.1.4. Operadores lógicos:</span> Estos operadores son utilizados para hacer preguntas, en donde la respuesta es booleana, es decir, del tipo verdadero <strong data-v-6ebe35d8>(true)</strong> y falso <strong data-v-6ebe35d8>(false)</strong>. Existen solo tres tipos de estos operadores:</p><img class="centrada" src="'+f+'" alt="" data-v-6ebe35d8><br data-v-6ebe35d8><p style="padding-left:20px;" data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>Nota:</span> Los operadores lógicos se suelen usar en estructuras de control <strong data-v-6ebe35d8>(if else)</strong>.</p><p class="texto-personalizado" style="padding-left:20px;" data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>4.2.1.5. Operadores de manejo de dirección:</span> En C existen operadores específicos de dirección <strong data-v-6ebe35d8>(punteros)</strong> y referencia, los cuales permiten obtener datos o dirigir alguna información a alguna parte.</p><img class="centrada" src="'+h+'" alt="" data-v-6ebe35d8><br data-v-6ebe35d8><p style="padding-left:20px;" data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>Nota:</span> Los operadores de manejo de dirección son utilizados cuando se imprime por pantalla algún dato, o en las estructuras de datos.</p><p class="texto-personalizado" style="padding-left:20px;" data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>4.2.1.6. Operadores de Bits:</span> Son operadores de movimiento a nivel de Bits, lo que significa que una cantidad determinada es convertida a su equivalente en Bits y luego se realiza el desplazamiento de dicho valor.</p><img class="centrada" src="'+y+'" alt="" data-v-6ebe35d8><br data-v-6ebe35d8><p style="padding-left:20px;" data-v-6ebe35d8><span style="font-weight:bold;" data-v-6ebe35d8>Nota:</span> Los operandos de este tipo de operadores tienen que ser del tipo entero <strong data-v-6ebe35d8>(int)</strong>, esto debido a que el desplazamiento siempre dará como resultado un número entero.</p><br data-v-6ebe35d8><h2 data-v-6ebe35d8>4.3 Video explicativo y demostrativo: Agregar cualquier video</h2><br data-v-6ebe35d8>',50),N={class:"col-md-3"},L={class:"temas"};function E(S,a,B,j,C,s){const t=i("Menu");return l(),p("div",w,[e("div",z,[q,e("div",null,[e("button",{class:"bt-validate",onClick:a[0]||(a[0]=(...d)=>s.finish&&s.finish(...d))},"Avanzar")])]),e("div",N,[e("div",L,[c(t)])])])}const k=o(_,[["render",E],["__scopeId","data-v-6ebe35d8"]]);export{k as default};
