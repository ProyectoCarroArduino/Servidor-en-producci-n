"use strict";var l=null;try{var d="undefined"!=typeof module&&"function"==typeof module.require&&module.require("worker_threads")||"function"==typeof __non_webpack_require__&&__non_webpack_require__("worker_threads")||"function"==typeof require&&require("worker_threads");l=d.Worker}catch(l){}function c(d,c,a){var b=void 0===c?null:c,Z=function(l,d){return Buffer.from(l,"base64").toString(d?"utf16":"utf8")}(d,void 0!==a&&a),G=Z.indexOf("\n",10)+1,X=Z.substring(G)+(b?"//# sourceMappingURL="+b:"");return function(d){return new l(X,Object.assign({},d,{eval:!0}))}}function a(l,d,c){var a=void 0===d?null:d,b=function(l,d){var c=atob(l);if(d){for(var a=new Uint8Array(c.length),b=0,Z=c.length;b<Z;++b)a[b]=c.charCodeAt(b);return String.fromCharCode.apply(null,new Uint16Array(a.buffer))}return c}(l,void 0!==c&&c),Z=b.indexOf("\n",10)+1,G=b.substring(Z)+(a?"//# sourceMappingURL="+a:""),X=new Blob([G],{type:"application/javascript"});return URL.createObjectURL(X)}var b="[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0);var Z,G,X,W=(Z="",G=null,X=!1,b?c(Z,G,X):function(l,d,c){var b;return function(Z){return b=b||a(l,d,c),new Worker(b,Z)}}(Z,G,X));class o{onReady;readyResolve;constructor(l){this.nextResponseId=0,this.responseCBs=new Map,this.worker=new W;const d=new MessageChannel;this.port=d.port1,this.port.onmessage=this.onmessage.bind(this);const c=d.port2;this.worker.postMessage({id:"constructor",payload:{port:c,path:l}},[c]),this.onReady=new Promise((l=>{this.readyResolve=l}))}setShowTiming(l){this.port.postMessage({id:"setShowTiming",payload:l})}terminate(){this.worker.terminate()}async runAsync(l,d){const c=this.nextResponseId++,a=new Promise(((l,d)=>{this.responseCBs.set(c,{resolve:l,reject:d})}));return this.port.postMessage({id:l,responseId:c,payload:d}),await a}compile(l,d){this.port.postMessage({id:"compile",payload:{code:l,options:d}})}link(l,d,c){this.port.postMessage({id:"link",data:{obj:l,out:d,options:c}})}execute(l,d){this.port.postMessage({id:"execute",payload:{out:l,params:d}})}run(l,d,c){this.port.postMessage({id:"run",payload:{code:l,params:d,options:c}})}onmessage(l){switch(l.data.id){case"ready":this.readyResolve();break;case"write":console.log(l.data.data);break;case"runAsync":{const d=l.data.responseId,c=this.responseCBs.get(d);c&&(this.responseCBs.delete(d),c.resolve(l.data.data));break}}}}let y;exports.isInitialed=!1,exports.compile=async function(l,d){},exports.execute=async function(l,d,c){},exports.init=async function({path:l}){exports.isInitialed||(y=new o(l||location.origin),await y.onReady,exports.isInitialed=!0)},exports.link=async function(l,d,c){},exports.run=async function(l){return await y.run(l)};
