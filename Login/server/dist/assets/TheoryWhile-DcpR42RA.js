import{_ as n,N as i,c as l,a as e,m as r,f as d,i as c,n as p,o as u}from"./index-CpEXMNlz.js";import{M as f}from"./Menu-BX5YG4Ba.js";import{_ as v}from"./Elementos while-CS9DZgwt.js";const g="/imagenes/Sintaxis%20while.png",m={components:{NavBar:i,Menu:f},methods:{finish(){p.push("/descomposicionWhileEj").then(()=>{window.scrollTo(0,0)})}}},b={id:"user"},h={class:"card card-body mt-8, align-left, col-md-15"},x={class:"col-md-3"},y={class:"temas"};function q(w,a,_,j,z,s){const t=c("Menu");return u(),l("div",b,[e("div",h,[a[3]||(a[3]=r('<h1 class="text-center" data-v-1502f604>5.4 Ciclo while</h1><br data-v-1502f604><br data-v-1502f604><h2 data-v-1502f604>5.4.1 Concepto de ciclo while</h2><p class="texto-personalizado" data-v-1502f604>La instrucción while es una estructura de repetición o cíclica, la cual permite ejecutar en <strong data-v-1502f604>bucle</strong> un conjunto de instrucciones <strong data-v-1502f604>(sentencias)</strong> hasta que se cumpla una condición especificada. El ciclo while no depende de un valor númerico, sino de una <strong data-v-1502f604>(condición booleana)</strong> que determinará dos posibles respuestas. La primera <strong data-v-1502f604>true</strong> se ingresa al conjunto de instrcciones, y la segunda <strong data-v-1502f604>false</strong> no se ingresa al conjunto de instrucciones.</p><p data-v-1502f604><span style="font-weight:bold;" data-v-1502f604>Nota:</span> La estructura while se suele usar en casos donde no se sabe cuántas veces haya que ejecutar el conjunto de instrucciones para satisfacer la condición dada.</p><br data-v-1502f604><h2 data-v-1502f604>5.4.2 Sintaxis ciclo while</h2><p class="texto-personalizado" data-v-1502f604>La sentencia while consta de los siguientes elementos:</p><ul data-v-1502f604><li data-v-1502f604><p class="texto-personalizado" data-v-1502f604><strong data-v-1502f604>Palabra reservada (while):</strong> Es la encargada de administrar la <span style="font-weight:bold;" data-v-1502f604>(expresión)</span> o condición determinada.</p></li><p data-v-1502f604><span style="font-weight:bold;" data-v-1502f604>Nota:</span> Al ser una palabra reservada no necesita estár declarada por ningún tipo de <strong data-v-1502f604>(variable)</strong>.</p><li data-v-1502f604><p class="texto-personalizado" data-v-1502f604><strong data-v-1502f604>Expresión o condición determinada:</strong> Es la que evaluará si la <span style="font-weight:bold;" data-v-1502f604>(condición booleana)</span> es verdadera o falsa. Si es verdadera <strong data-v-1502f604>(true)</strong> el programa continuará ejecutándose, pero si es falso <strong data-v-1502f604>(false)</strong> el programa finalizará al instante. La <strong data-v-1502f604>(condicón booleana)</strong> es del tipo:</p></li><p class="text-center" data-v-1502f604><span style="font-weight:bold;" data-v-1502f604> ( variable a comparar + operador relacional + valor de comparación )</span></p><ul class="custom-list" style="padding-left:20px;" data-v-1502f604><li data-v-1502f604><p class="texto-li" style="padding-left:20px;" data-v-1502f604> La variable a comparar puede ser de cualquier tipo y tiene que estar declarada.</p></li><li data-v-1502f604><p class="texto-li" style="padding-left:20px;" data-v-1502f604> El operador relacional es el que se va a comparar y siempre debe de haber uno.</p></li><li data-v-1502f604><p class="texto-li" style="padding-left:20px;" data-v-1502f604> El valor de comparación puede ser otra variable y siempre tiene que haber alguno.</p></li></ul><p data-v-1502f604><span style="font-weight:bold;" data-v-1502f604>Nota:</span> La expresión o condición determinada siempre deberá ir encerrada entre <strong data-v-1502f604>paréntesis</strong>.</p><li data-v-1502f604><p class="texto-personalizado" data-v-1502f604><strong data-v-1502f604>Sentencias o conjunto de instrucciones:</strong> Son aquellas instrucciones que se quiere que se ejecuten cada vez que la <strong data-v-1502f604>(condición booleana)</strong> sea verdadera <strong data-v-1502f604>(true)</strong>. Las sentencias pueden ser:</p></li><ul class="custom-list" style="padding-left:20px;" data-v-1502f604><li data-v-1502f604><p class="texto-li" style="padding-left:20px;" data-v-1502f604> Impresiones y solicitud de datos.</p></li><li data-v-1502f604><p class="texto-li" style="padding-left:20px;" data-v-1502f604> operaciones aritmeticas.</p></li><li data-v-1502f604><p class="texto-li" style="padding-left:20px;" data-v-1502f604> Condicionales de cualquier tipo <strong data-v-1502f604>(switch case o if else)</strong>.</p></li><li data-v-1502f604><p class="texto-li" style="padding-left:20px;" data-v-1502f604> Ciclos de cualquier tipo <strong data-v-1502f604>(for, while, do while)</strong>.</p></li></ul><p data-v-1502f604><span style="font-weight:bold;" data-v-1502f604>Nota:</span> Las sentencias siempre deben ir delimitadas por <strong data-v-1502f604>(corchetes)</strong> de lo contrario solo se ejecutaría la primera sentencia y no el conjunto de sentencias.</p></ul><br data-v-1502f604><img class="centrada" src="'+g+'" alt="" data-v-1502f604><br data-v-1502f604><br data-v-1502f604><p class="texto-personalizado" style="padding-left:20px;" data-v-1502f604><span style="font-weight:bold;" data-v-1502f604>5.4.2.3 Elementos que se suelen usar:</span> En la mayoría de ejemplos hay elementos que no son parte de la sintaxis, pero que su uso es casi que obligatorio. Algunos de los más comunes son:</p><ul data-v-1502f604><li data-v-1502f604><p class="texto-personalizado" data-v-1502f604><strong data-v-1502f604>Contador:</strong> Es el encargado de administrar el número de ejecuciones determinadas por el usuario.</p></li><p data-v-1502f604><span style="font-weight:bold;" data-v-1502f604>Nota:</span> El contador no es obligatorio ni usado en todos los programas, solo se usa si el usuario determina el número de veces que quiere que las <strong data-v-1502f604>(sentencias)</strong> se ejecuten.</p><li data-v-1502f604><p class="texto-personalizado" data-v-1502f604><strong data-v-1502f604>Funcion system pause:</strong> Incorpora una pausa en el programa, lo que siginifica que si se quiere seguir ejecutando se necesita que el usuario presione alguna tecla para poder continuar. Para poder hacer uso de esta función se necesita implementar la biblioteca <strong data-v-1502f604>(stdlib.h)</strong></p></li><p data-v-1502f604><span style="font-weight:bold;" data-v-1502f604>Nota:</span> La función system pause es utilizada en ejemplos donde se solicita que el usuario sea el que verifique si la <strong data-v-1502f604>(condición booleana)</strong> se cumple o no.</p></ul><br data-v-1502f604><img class="centrada" src="'+v+'" alt="" data-v-1502f604><br data-v-1502f604>',19)),e("div",null,[a[1]||(a[1]=e("br",null,null,-1)),a[2]||(a[2]=e("br",null,null,-1)),e("button",{class:"bt-validate",onClick:a[0]||(a[0]=(...o)=>s.finish&&s.finish(...o))},"Avanzar")])]),e("div",x,[e("div",y,[d(t)])])])}const C=n(m,[["render",q],["__scopeId","data-v-1502f604"]]);export{C as default};
