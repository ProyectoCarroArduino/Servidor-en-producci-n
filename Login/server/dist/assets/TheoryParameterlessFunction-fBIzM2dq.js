import{_ as s,N as r,c as d,a as e,m as c,f as i,i as l,n as p,o as u}from"./index-CKYN570q.js";import{M as v}from"./Menu-BVwC9rXt.js";const g=""+new URL("../imagenes/Funciones sin parámetros ni return.png",import.meta.url).href,m=""+new URL("../imagenes/Funciones sin parámetros y con return.png",import.meta.url).href,f=""+new URL("../imagenes/Estructura función.png",import.meta.url).href,b={components:{NavBar:r,Menu:v},methods:{finish(){p.push("/descomposicionFuncionesSinparEj").then(()=>{window.scrollTo(0,0)})}}},q={id:"user"},y={class:"card card-body mt-8, align-left, col-md-15"},h={class:"col-md-3"},x={class:"temas"};function w(z,a,_,E,N,n){const t=l("Menu");return u(),d("div",q,[e("div",y,[a[3]||(a[3]=c('<h1 class="text-center" data-v-ca9d214e>7.1 Funciones (sin parámetros)</h1><br data-v-ca9d214e><br data-v-ca9d214e><h2 data-v-ca9d214e>7.1.1 Concepto de función</h2><p class="texto-personalizado" data-v-ca9d214e>Una función es un conjunto de intrucciones que se van a ejecutar en orden descendente o <strong data-v-ca9d214e>(bloque)</strong> y se espera que cumpla con una tarea específica. Una función es reutilizable dentro de un programa, por lo que puede ser <strong data-v-ca9d214e>(llamada)</strong> en cualquier parte del programa, permitiendo que haya un manejo más óptimo en el código. Hay dos tipos de funciones que se suelen usar en un programa, primero está la función <strong data-v-ca9d214e>(sin parámetros)</strong> y segundo se encuentra la función <strong data-v-ca9d214e>(con parámetros)</strong>.</p><p data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>Nota:</span> En este apartado de la teoria solo se hablará de la función <strong data-v-ca9d214e>(sin parámetros)</strong>.</p><br data-v-ca9d214e><h2 data-v-ca9d214e>7.1.2 Sintaxis o declaración de una función</h2><p class="texto-personalizado" data-v-ca9d214e>Para declarar una función se necesitan los siguientes elementos:</p><ul data-v-ca9d214e><li data-v-ca9d214e><p class="texto-personalizado" data-v-ca9d214e><strong data-v-ca9d214e>Tipo de la función o de retorno:</strong> Se encarga de especificar el tipo de dato que la función va a retornar <span style="font-weight:bold;" data-v-ca9d214e>(devolver)</span> como respuesta. Si la función es <strong data-v-ca9d214e>(sin parámetros)</strong> el tipo debe ser <strong data-v-ca9d214e>(void)</strong>. Por otro lado, si la función es <strong data-v-ca9d214e>(con parámetros)</strong> el tipo puede ser el de cualquier tipo de variable, como por ejemplo, int, double, char, etc.</p></li><p data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>Nota:</span> Para este apartado de la teoria, el cual habla sobre funciones <strong data-v-ca9d214e>(sin parámetros)</strong> el tipo que se debe asignar es <strong data-v-ca9d214e>(void)</strong>.</p><li data-v-ca9d214e><p class="texto-personalizado" data-v-ca9d214e><strong data-v-ca9d214e>Nombre de la función:</strong> Es el identificador o nombre que se va a usar para poder <span style="font-weight:bold;" data-v-ca9d214e>(invocar o llamar)</span> la función. Se le llama <strong data-v-ca9d214e>(invocar o llamar)</strong> cuando se quiere reutilizar la función en alguna parte del código. </p></li><p data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>Nota:</span> Para entender más sobre qué es <strong data-v-ca9d214e>(llamar o invocar)</strong> una función siga leyendo este apartado y dirijase a la parte de <strong data-v-ca9d214e>(estructura o cuerpo de una función)</strong>.</p><li data-v-ca9d214e><p class="texto-personalizado" data-v-ca9d214e><strong data-v-ca9d214e>Parámetros:</strong> Son valores que se pasan o <strong data-v-ca9d214e>(entregan)</strong> a la función para que esta los utilice. Los parámetros pueden ser de cualquier tipo, ya que lo que se conoce como <strong data-v-ca9d214e>(parámetro)</strong> es una variable que puede llamarse de cualquier forma. Lo más importante acerca de los <strong data-v-ca9d214e>(parámetros)</strong> es que deben ir dentro de los paréntesis si se quiere declarar uan función <strong data-v-ca9d214e>(con parámetros)</strong>, pero si se quiere declarar una función <strong data-v-ca9d214e>(sin parámetros)</strong> los paréntesis deben estar vacios.</p></li><p data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>Nota:</span> Si se quiere declarar una funcion <strong data-v-ca9d214e>(sin parámetros)</strong> los paréntesis deben estar vacios, no agregue ninguna palabra reservada como while, void, if, etc.</p><li data-v-ca9d214e><p class="texto-personalizado" data-v-ca9d214e><strong data-v-ca9d214e>return o respuesta:</strong> Es el encargado de <strong data-v-ca9d214e>(devolver)</strong> una respuesta o valor al lugar desde donde se <strong data-v-ca9d214e>(llama)</strong> a la función, este lugar puede ser la función main y otras funciones. El valor que devuelve una función <strong data-v-ca9d214e>(sin parámetros)</strong> no esta limitado a ningún tipo de dato, es decir que lo que haga específicamente la función llegará como respuesta. Por otro lado, el valor que debe devolver una función <strong data-v-ca9d214e>(con parámetros)</strong> debe ser el mismo que el tipo con el que se declaró la función, de la contrario el programa arrojará un error de sintaxis. </p></li><p data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>Nota:</span> Una función <strong data-v-ca9d214e>(sin parámetros)</strong> no necesariamente necesita un <strong data-v-ca9d214e>(return)</strong>. Por otro lado, una función <strong data-v-ca9d214e>(con parámetros)</strong> necesita contener el <strong data-v-ca9d214e>(return)</strong> de lo contrario se retornará el valor predeterminado de la función.</p></ul><p class="text-center" data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e> tipo de la función + nombre de la función + (parámetros) </span></p><p class="text-center" data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e> { <br data-v-ca9d214e> bloque de instrucción <br data-v-ca9d214e><br data-v-ca9d214e> return valor; <br data-v-ca9d214e> } </span></p><br data-v-ca9d214e><h2 data-v-ca9d214e>7.1.3 Tipos de función</h2><p class="texto-personalizado" data-v-ca9d214e>Existen cuatro tipos de funciones que se pueden usar en el lenguaje C:</p><p data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>Nota:</span> En este apartado de la teoria solo se hablará de los tipos que tienen que ver con la función <strong data-v-ca9d214e>(sin parámetros)</strong>.</p><p class="texto-personalizado" style="padding-left:20px;" data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>7.1.3.1 Funciones sin párametros que no retornan nada:</span> Son funciones que no reciben ningún tipo de dato para ser manejado <strong data-v-ca9d214e>(parámetro)</strong> y tampoco devuelven <strong data-v-ca9d214e>(retornan)</strong> ningún tipo de resultado. Ejemplo:</p><br data-v-ca9d214e><img class="centrada" src="'+g+'" alt="" data-v-ca9d214e><br data-v-ca9d214e><p style="padding-left:20px;" data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>Nota:</span> Si la función es llamada por ejemplo por la función <strong data-v-ca9d214e>(main)</strong> y esta a su vez intenta imprimir el resultado que la función de tipo <strong data-v-ca9d214e>(void)</strong> tiene alamcenado, la respuesta será <strong data-v-ca9d214e>(Hola mundo)</strong>.</p><br data-v-ca9d214e><p class="texto-personalizado" style="padding-left:20px;" data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>7.1.3.2 Funciones que no devuelven ningún valor pero si reciben parámetros:</span> Para saber más acerca de estas funciones dirijase al tema <strong data-v-ca9d214e>(7.2 Funciones con parámetros)</strong>.</p><br data-v-ca9d214e><p class="texto-personalizado" style="padding-left:20px;" data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>7.1.3.3 Funciones que devuelven un valor y no reciben parámetros:</span> Son funciones que no reciben ningún <strong data-v-ca9d214e>(parámetro)</strong>. Sin embargo, si devuelven una respuesta o tienen un <strong data-v-ca9d214e>(return)</strong>. Ejemplo:</p><br data-v-ca9d214e><img class="centrada" src="'+m+'" alt="" data-v-ca9d214e><br data-v-ca9d214e><p style="padding-left:20px;" data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>Nota:</span> En este tipo de función es muy importante que el tipo que se le declaró a la función coincida con el valor que se va a retornar. Si la función <strong data-v-ca9d214e>(main)</strong> llama a la función y a la vez intenta imrpirmir el resultado que está almacenado, el valor será <strong data-v-ca9d214e>(10)</strong>.</p><br data-v-ca9d214e><p class="texto-personalizado" style="padding-left:20px;" data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>7.1.3.4 Funciones que devuelven un valor y reciben parámetros:</span> Para saber más acerca de estas funciones dirijase al tema <strong data-v-ca9d214e>(7.2 Funciones con parámetros)</strong>.</p><br data-v-ca9d214e><h2 data-v-ca9d214e>7.1.4 Estructura de una función</h2><p class="texto-personalizado" data-v-ca9d214e>Para que una funcion pueda ser reutilizada en cualquier parte de un programa se necesita definir su estructura:</p><ul data-v-ca9d214e><li data-v-ca9d214e><p class="texto-personalizado" data-v-ca9d214e><strong data-v-ca9d214e>Función prototipo:</strong> En el lenguaje C es importante definir la función prototipo antes que la función <strong data-v-ca9d214e>(main)</strong>, de esta forma otra función puede <strong data-v-ca9d214e>(llamar)</strong> a una función específica. La función prototipo se define de la siguiente forma: </p></li><p class="text-center" data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e> ( tipo de la función + nombre de la función + (parámetros) )</span></p><p data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>Nota:</span> El tipo de función para una función <strong data-v-ca9d214e>(sin parámetros)</strong> debe ser <strong data-v-ca9d214e>(void)</strong>, también una función <strong data-v-ca9d214e>(sin parámetros)</strong> no debe llevar nada dentro de los paréntesis. </p><li data-v-ca9d214e><p class="texto-personalizado" data-v-ca9d214e><strong data-v-ca9d214e>llamada:</strong> Es la encargada de invocar <strong data-v-ca9d214e>(llamar)</strong> a una función desde cualquier parte del código. La sintaxis de la llamada es la siguiente:</p></li><p class="text-center" data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e> ( nombre de la función + (parámetros) + punto y coma (;))</span></p><p data-v-ca9d214e><span style="font-weight:bold;" data-v-ca9d214e>Nota:</span> Para una función <strong data-v-ca9d214e>(sin parámetros)</strong> que no devuelva <strong data-v-ca9d214e>(return)</strong> un valor los paréntesis deben estar vacios, y para una función <strong data-v-ca9d214e>(sin parámetros)</strong> que si devuelva <strong data-v-ca9d214e>(return)</strong> un valor en los paréntesis debe ir el nombre que almacena el valor o el valor en si.</p><li data-v-ca9d214e><p class="texto-personalizado" data-v-ca9d214e><strong data-v-ca9d214e>Definición o declaración de una función:</strong> Es donde la función se <strong data-v-ca9d214e>(define)</strong>. Para aprender más sobre este tema ir al punto <strong data-v-ca9d214e>(7.2 Sintaxis o declaración de una función)</strong> en este mismo apartado.</p></li></ul><br data-v-ca9d214e><img class="centrada" src="'+f+'" alt="" data-v-ca9d214e><br data-v-ca9d214e>',38)),e("div",null,[a[1]||(a[1]=e("br",null,null,-1)),a[2]||(a[2]=e("br",null,null,-1)),e("button",{class:"bt-validate",onClick:a[0]||(a[0]=(...o)=>n.finish&&n.finish(...o))},"Avanzar")])]),e("div",h,[e("div",x,[i(t)])])])}const P=s(b,[["render",w],["__scopeId","data-v-ca9d214e"]]);export{P as default};
